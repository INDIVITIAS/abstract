#!/bin/bash

# ----------------------------
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∏ –∏–∫–æ–Ω–æ–∫
# ----------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
MAGENTA='\033[0;35m'
RESET='\033[0m'

CHECKMARK="‚úÖ"
ERROR="‚ùå"
PROGRESS="‚è≥"
INSTALL="üõ†Ô∏è"
STOP="‚èπÔ∏è"
RESTART="üîÑ"
LOGS="üìÑ"
EXIT="üö™"
INFO="‚ÑπÔ∏è"
ICON_KEFIR="ü•õ"

# ----------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
# ----------------------------
install_docker() {
    echo -e "${INSTALL} –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...${RESET}"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ GPG-–∫–ª—é—á–∞ Docker:
    sudo apt-get update
    sudo apt-get install ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ Apt:
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    echo -e "${CHECKMARK} Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${RESET}"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
}

# ----------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Mainnet
# ----------------------------
install_mainnet() {
    echo -e "${INSTALL} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Abstract Mainnet...${RESET}"
    
    if [ -d "abstract-node" ]; then
        echo -e "${INFO} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è abstract-node —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...${RESET}"
        cd abstract-node
        git pull
    else
        git clone https://github.com/Abstract-Foundation/abstract-node
        cd abstract-node
    fi
    
    docker compose --file external-node/mainnet-external-node.yml up -d
    echo -e "${CHECKMARK} Abstract Mainnet —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.${RESET}"
    cd ..
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
}

# ----------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Testnet
# ----------------------------
install_testnet() {
    echo -e "${INSTALL} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Abstract Testnet...${RESET}"
    
    if [ -d "abstract-node" ]; then
        echo -e "${INFO} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è abstract-node —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...${RESET}"
        cd abstract-node
        git pull
    else
        git clone https://github.com/Abstract-Foundation/abstract-node
        cd abstract-node
    fi
    
    docker compose --file external-node/testnet-external-node.yml up -d
    echo -e "${CHECKMARK} Abstract Testnet —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.${RESET}"
    cd ..
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
}

# ----------------------------
# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
# ----------------------------
view_logs() {
    echo -e "${INFO} –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${RESET}"
    echo "1. node-external-node-1"
    echo "2. node-postgres-1"
    echo "3. node-prometheus-1"
    echo "4. node-grafana-1"
    # echo "5. mainnet-node-external-node-1"
    # echo "6. mainnet-node-postgres-1"
    # echo "7. mainnet-node-prometheus-1"
    # echo "8. mainnet-node-grafana-1"
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ [1-8]: " num
    case $num in
        1) container="testnet-node-external-node-1";;
        2) container="testnet-node-postgres-1";;
        3) container="testnet-node-prometheus-1";;
        4) container="testnet-node-grafana-1";;
        # 5) container="mainnet-node-external-node-1";;
        # 6) container="mainnet-node-postgres-1";;
        # 7) container="mainnet-node-prometheus-1";;
        # 8) container="mainnet-node-grafana-1";;
        *) echo -e "${ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${RESET}"; return;;
    esac

    echo -e "${LOGS} –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–ª—è $container...${RESET}"
    docker logs -f $container
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
}

# ----------------------------
# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mainnet
# ----------------------------
stop_mainnet() {
    echo -e "${STOP} –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Abstract Mainnet...${RESET}"
    cd abstract-node
    docker compose --file external-node/mainnet-external-node.yml down
    cd ..
    echo -e "${CHECKMARK} Mainnet —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${RESET}"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
}

# ----------------------------
# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Testnet
# ----------------------------
stop_testnet() {
    echo -e "${STOP} –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Abstract Testnet...${RESET}"
    cd abstract-node
    docker compose --file external-node/testnet-external-node.yml down
    cd ..
    echo -e "${CHECKMARK} Testnet —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${RESET}"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
}

# ----------------------------
# –í—ã–≤–æ–¥ ASCII-–ª–æ–≥–æ—Ç–∏–ø–∞ –∏ —Å—Å—ã–ª–æ–∫
# ----------------------------
display_ascii() {
    clear
    echo -e "${CYAN}   ____   _  __   ___    ____ _   __   ____ ______   ____   ___    ____${RESET}"
    echo -e "${CYAN}  /  _/  / |/ /  / _ \\  /  _/| | / /  /  _//_  __/  /  _/  / _ |  / __/${RESET}"
    echo -e "${CYAN} _/ /   /    /  / // / _/ /  | |/ /  _/ /   / /    _/ /   / __ | _\\ \\  ${RESET}"
    echo -e "${CYAN}/___/  /_/|_/  /____/ /___/  |___/  /___/  /_/    /___/  /_/ |_|/___/  ${RESET}"
    echo -e ""
    echo -e "${YELLOW}–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ Telegram: https://t.me/CryptalikBTC${RESET}"
    echo -e "${YELLOW}–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ YouTube: https://www.youtube.com/@Cryptalik${RESET}"
    echo -e "${YELLOW}–ó–¥–µ—Å—å –ø—Ä–æ –∞–∏—Ä–¥—Ä–æ–ø—ã –∏ –Ω–æ–¥—ã: https://t.me/indivitias${RESET}"
    echo -e "${YELLOW}–ö—É–ø–∏ –º–Ω–µ –∫—Ä–∏–ø—Ç–æ –±—É—Ç—ã–ª–æ—á–∫—É... ${ICON_KEFIR}–∫–µ—Ñ–∏—Ä–∞ üòè${RESET} ${MAGENTA} üëâ  https://bit.ly/4eBbfIr  üëà ${MAGENTA}"
    echo -e ""
}

# ----------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ----------------------------
show_menu() {
    clear
    display_ascii
    echo -e "    ${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:${RESET}"
    echo -e "    ${CYAN}1.${RESET} ${INSTALL} –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker"
    echo -e "    ${CYAN}2.${RESET} ${INSTALL} –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–∑–µ–ª Mainnet"
    echo -e "    ${CYAN}3.${RESET} ${INSTALL} –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–∑–µ–ª Testnet"
    echo -e "    ${CYAN}4.${RESET} ${LOGS} –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo -e "    ${CYAN}5.${RESET} ${STOP} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∑–µ–ª Mainnet"
    echo -e "    ${CYAN}6.${RESET} ${STOP} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∑–µ–ª Testnet"
    echo -e "    ${CYAN}7.${RESET} ${EXIT} –í—ã—Ö–æ–¥"
    echo -ne "    ${YELLOW}–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä [1-7]: ${RESET}"
}

# ----------------------------
# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
# ----------------------------
while true; do
    show_menu
    read choice
    case $choice in
        1) install_docker;;
        2) install_mainnet;;
        3) install_testnet;;
        4) view_logs;;
        5) stop_mainnet;;
        6) stop_testnet;;
        7)
            echo -e "${EXIT} –í—ã—Ö–æ–¥...${RESET}"
            exit 0
            ;;
        *)
            echo -e "${ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${RESET}"
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
            ;;
    esac
done
